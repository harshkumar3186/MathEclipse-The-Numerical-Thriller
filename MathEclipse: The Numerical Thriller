#include <bits/stdc++.h>
#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

void displayMenu() {
    cout << "==== MathEclipse: The Numerical Thriller====" << endl;
    cout << "1. Addition" << endl;
    cout << "2. Subtraction" << endl;
    cout << "3. Multiplication" << endl;
    cout << "4. Division" << endl;
    cout << "5. Exponentiation" << endl;
    cout << "6. Square Root" << endl;
    cout << "7. Logarithm (Base 10)" << endl;
    cout << "8. Trigonometric Functions" << endl;
    cout << "9. Factorial (Recursive)" << endl;
    cout << "10. Factorial" << endl;
    cout << "11. Absolute Value" << endl;
    cout << "12. Modulo" << endl;
    cout << "13. Floor" << endl;
    cout << "14. Ceiling" << endl;
    cout << "15. Round" << endl;
    cout << "16. Prime Check" << endl;
    cout << "17. Fibonacci Series" << endl;
    cout << "18. Percentage" << endl;
    cout << "19. Power of 2" << endl;
    cout << "20. Square" << endl;
    cout << "21. Cube" << endl;
    cout << "22. Average" << endl;
    cout << "23. Logarithm (Natural)" << endl;
    cout << "24. Inverse" << endl;
    cout << "25. Minimum" << endl;
    cout << "26. Maximum" << endl;
    cout << "27. Reverse Digits" << endl;
    cout << "28. Factorial (Iterative)" << endl;
    cout << "29. Power" << endl;
    cout << "30. Cube Root" << endl;
    cout << "31. Integration" << endl;
    cout << "32. Differentiation" << endl;
    cout << "33. Matrix Addition" << endl;
    cout << "34. Matrix Subtraction" << endl;
    cout << "35. Matrix Multiplication" << endl;
    cout << "36. Matrix Transpose" << endl;
    cout << "37. Determinant of a Matrix" << endl;
    cout << "38. Binary Search" << endl;
    cout << "39. Bubble Sort" << endl;
    cout << "40. Selection Sort" << endl;
    cout << "41. Insertion Sort" << endl;
    cout << "42. Merge Sort" << endl;
    cout << "43. Quick Sort" << endl;
    cout << "44. Newton-Raphson Method" << endl;
    cout << "45. Bisection Method" << endl;
    cout << "46. Simpson's Rule" << endl;
    cout << "47. Trapezoidal Rule" << endl;
    cout << "48. Vector Addition" << endl;
    cout << "49. Vector Subtraction" << endl;
    cout << "50. Scalar Multiplication of a Vector" << endl;
    cout << "51. Dot Product of Vectors" << endl;
    cout << "52. Cross Product of Vectors" << endl;
    cout << "53. Magnitude of a Vector" << endl;
    cout << "54. Unit Vector" << endl;
    cout << "55. Angle Between Vectors" << endl;
    cout << "56. Scalar Projection" << endl;
    cout << "57. Vector Projection" << endl;
    cout << "58. Triple Product of Vectors" << endl;
    cout << "59. Gauss Jordan" << endl;
    cout << "60. Linear Equation Solver" << endl;
    cout << "61. Permutation" << endl;
    cout << "62. Combination" << endl;
    cout << "63. Probablity" << endl;
    cout << "64. Mean" << endl;
    cout << "65. Variance" << endl;
    cout << "66. Standard Deviation" << endl;
    cout << "67. Taylor Series" << endl;
    cout << "68. Fourier Series" << endl;
    cout << "69. Green’s Theorem" << endl;
    cout << "70. Stokes Theorem" << endl;
    cout << "71. Residue" << endl;
    cout << "72. Bessel" << endl;
    cout << "73. Laplace Transform" << endl;
    cout << "74. Bayes Theorem" << endl;
    cout << "75. Range – Kutta Method" << endl;
    cout << "76. Exit" << endl;
    cout << "=====================================" << endl;
    cout << "Enter your choice: ";
}

int getInput() {
    int choice;
    cin >> choice;
    cout << endl;
    return choice;
}

void performAddition() {
    double num1, num2;
    cout << "Enter the first number: ";
    cin >> num1;
    cout << "Enter the second number: ";
    cin >> num2;
    
    cout << "Performing addition..." << endl;
    cout << "Result: " << (num1 + num2) << endl;
}

void performSubtraction() {
    double num1, num2;
    cout << "Enter the first number: ";
    cin >> num1;
    cout << "Enter the second number: ";
    cin >> num2;
    cout << "Performing subtraction..." << endl;
    cout << "Result: " << (num1 - num2) << endl;
}

void performMultiplication() {
    double num1, num2;
    cout << "Enter the first number: ";
    cin >> num1;
    cout << "Enter the second number: ";
    cin >> num2;
    cout << "Performing multiplication..." << endl;
    cout << "Result: " << (num1 * num2) << endl;
}

void performDivision() {
    double num1, num2;
    cout << "Enter the dividend: ";
    cin >> num1;
    cout << "Enter the divisor: ";
    cin >> num2;
    cout << "Performing division..." << endl; 
    if (num2 != 0)
        cout << "Result: " << (num1 / num2) << endl;
    else
        cout << "Error: Division by zero!" << endl;
}

void performExponentiation() {
    double base, exponent;
    cout << "Enter the base: ";
    cin >> base;
    cout << "Enter the exponent: ";
    cin >> exponent;
    cout << "Performing exponentiation..." << endl;
    cout << "Result: " << pow(base, exponent) << endl;
}

void performSquareRoot() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Performing square root..." << endl;
    if (number >= 0)
        cout << "Result: " << sqrt(number) << endl;
    else
        cout << "Error: Invalid input for square root!" << endl;
}

void performLogarithm() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Performing logarithm (base 10)..." << endl;
    if (number > 0)
        cout << "Result: " << log10(number) << endl;
    else
        cout << "Error: Invalid input for logarithm!" << endl;
}

void performTrigonometricFunctions() {
    double angle;
    cout << "Enter the angle in degrees: ";
    cin >> angle;
    double radians = angle * (M_PI / 180.0);
    cout << "Performing trigonometric functions..." << endl;
    cout << "Sin(" << angle << ") = " << sin(radians) << endl;
    cout << "Cos(" << angle << ") = " << cos(radians) << endl;
    cout << "Tan(" << angle << ") = " << tan(radians) << endl;
}


void performFactorialRecursive(int num, int& factorial) {
    if (num == 0) {
        factorial = 1;
    } else {
        performFactorialRecursive(num - 1, factorial);
        factorial *= num;
    }
}

void performFactorial() {
    int num;
    cout << "Enter a positive integer: ";
    cin >> num;
    cout << "Performing factorial..." << endl;
    if (num >= 0) {
        int factorial = 1;
        performFactorialRecursive(num, factorial);
        cout << "Factorial of " << num << " is: " << factorial << endl;
    } else {
        cout << "Error: Invalid input for factorial!" << endl;
    }
}


void performAbsoluteValue() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Performing absolute value..." << endl;
    cout << "Result: " << abs(number) << endl;
}

void performModulo() {
    int dividend, divisor;
    cout << "Enter the dividend: ";
    cin >> dividend;
    cout << "Enter the divisor: ";
    cin >> divisor;
    cout << "Performing modulo..." << endl;
    if (divisor != 0)
        cout << "Result: " << (dividend % divisor) << endl;
    else
        cout << "Error: Division by zero!" << endl;
}

void performFloor() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Performing floor..." << endl;
    cout << "Result: " << floor(number) << endl;
}

void performCeiling() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Performing ceiling..." << endl;
    cout << "Result: " << ceil(number) << endl;
}

void performRound() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Performing round..." << endl;
    cout << "Result: " << round(number) << endl;
}

bool isPrime(int num) {
    if (num <= 1)
        return false;
    for (int i = 2; i <= sqrt(num); i++) {
        if (num % i == 0)
            return false;
    }
    return true;
}

void performPrimeCheck() {
    int num;
    cout << "Enter a positive integer: ";
    cin >> num;
    cout << "Performing prime check..." << endl;
    if (isPrime(num))
        cout << num << " is a prime number." << endl;
    else
        cout << num << " is not a prime number." << endl;
}

vector<int> generateFibonacciSeries(int n) {
    vector<int> series;
    if (n >= 1)
        series.push_back(0);
    if (n >= 2)
        series.push_back(1);
    for (int i = 2; i < n; i++) {
        int num = series[i - 1] + series[i - 2];
        series.push_back(num);
    }
    return series;
}

void performFibonacciSeries() {
    int n;
    cout << "Enter the number of terms in the Fibonacci series: ";
    cin >> n;
    cout << "Generating Fibonacci series..." << endl;
    if (n <= 0)
        cout << "Error: Invalid input for Fibonacci series!" << endl;
    else {
        vector<int> series = generateFibonacciSeries(n);
        cout << "Fibonacci Series: ";
        for (int i = 0; i < series.size(); i++)
            cout << series[i] << " ";
        cout << endl;
    }
}

void performPercentage() {
    double base, percentage;
    cout << "Enter the base value: ";
    cin >> base;
    cout << "Performing percentage calculation..." << endl;
    cout << "Enter the percentage: ";
    cin >> percentage;
    cout << "Result: " << (base * percentage / 100.0) << endl;
}

double performPowerOf2Recursive(int n) {
    if (n == 0)
        return 1;
    else if (n > 0)
        return 2 * performPowerOf2Recursive(n - 1);
    else
        return 1 / (2 * performPowerOf2Recursive(-n - 1));
}

void performPowerOf2() {
    int n;
    cout << "Enter the exponent: ";
    cin >> n;
    cout << "Calculating power of 2..." << endl;
    cout << "Result: " << performPowerOf2Recursive(n) << endl;
}

void performSquare() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Calculating square..." << endl;
    cout << "Result: " << (number * number) << endl;
}

void performCube() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Calculating cube..." << endl;
    cout << "Result: " << (number * number * number) << endl;
}

void performAverage() {
    int n;
    cout << "Enter the number of values: ";
    cin >> n;
    if (n <= 0)
        cout << "Error: Invalid input for average!" << endl;
    else {
        double sum = 0;
        cout << "Enter the values: ";
        cout << "Calculating average..." << endl;
        for (int i = 0; i < n; i++) {
            double value;
            cin >> value;
            sum += value;
        }
        double average = sum / n;
        cout << "Average: " << average << endl;
    }
}

void performNaturalLogarithm() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Performing natural logarithm..." << endl;
    if (number > 0)
        cout << "Result: " << log(number) << endl;
    else
        cout << "Error: Invalid input for natural logarithm!" << endl;
}

void performInverse() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Calculating inverse..." << endl;
    if (number != 0)
        cout << "Result: " << (1 / number) << endl;
    else
        cout << "Error: Division by zero!" << endl;
}

double performMinimum(double num1, double num2) {
    return min(num1, num2);
}

void performMinimum() {
    double num1, num2;
    cout << "Enter the first number: ";
    cin >> num1;
    cout << "Enter the second number: ";
    cin >> num2;
    cout << "Calculating minimum..." << endl;
    cout << "Result: " << performMinimum(num1, num2) << endl;
}

double performMaximum(double num1, double num2) {
    return max(num1, num2);
}

void performMaximum() {
    double num1, num2;
    cout << "Enter the first number: ";
    cin >> num1;
    cout << "Enter the second number: ";
    cin >> num2;
    cout << "Calculating maximum..." << endl;
    cout << "Result: " << performMaximum(num1, num2) << endl;
}

int reverseDigits(int number) {
    int reversedNumber = 0;
    while (number != 0) {
        reversedNumber = (reversedNumber * 10) + (number % 10);
        number /= 10;
    }
    return reversedNumber;
}

void performReverseDigits() {
    int number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Reversing digits..." << endl;
    cout << "Result: " << reverseDigits(number) << endl;
}

int performFactorialIterative(int num) {
    int factorial = 1;
    for (int i = 2; i <= num; i++) {
        factorial *= i;
    }
    return factorial;
}

void performFactorialIterative() {
    int num;
    cout << "Enter a positive integer: ";
    cin >> num;
    cout << "Performing iterative factorial..." << endl;
    if (num >= 0) {
        int factorial = performFactorialIterative(num);
        cout << "Factorial of " << num << " is: " << factorial << endl;
    } else {
        cout << "Error: Invalid input for factorial!" << endl;
    }
}

double performPower(double base, double exponent) {
    return pow(base, exponent);
}

void performPower() {
    double base, exponent;
    cout << "Enter the base: ";
    cin >> base;
    cout << "Enter the exponent: ";
    cin >> exponent;
    cout << "Performing power calculation..." << endl;
    cout << "Result: " << performPower(base, exponent) << endl;
}

void performCubeRoot() {
    double number;
    cout << "Enter the number: ";
    cin >> number;
    cout << "Calculating cube root..." << endl;
    cout << "Result: " << cbrt(number) << endl;
}

double performIntegration(double (*function)(double), double lowerLimit, double upperLimit, int numIntervals) {
    double intervalSize = (upperLimit - lowerLimit) / numIntervals;
    double sum = 0.0;
    for (int i = 0; i < numIntervals; i++) {
        double x1 = lowerLimit + (i * intervalSize);
        double x2 = x1 + intervalSize;
        sum += (intervalSize / 2) * (function(x1) + function(x2));
    }
    return sum;
}

double squareFunction(double x) {
    return x * x;
}

void performIntegration() {
    double lowerLimit, upperLimit;
    int numIntervals;
    cout << "Enter the lower limit: ";
    cin >> lowerLimit;
    cout << "Enter the upper limit: ";
    cin >> upperLimit;
    cout << "Enter the number of intervals: ";
    cin >> numIntervals;
    cout << "Performing integration..." << endl;
    double result = performIntegration(squareFunction, lowerLimit, upperLimit, numIntervals);
    cout << "Result: " << result << endl;
}

double performDifferentiation(double (*function)(double), double x, double h) {
    return (function(x + h) - function(x)) / h;
}

double cubeFunction(double x) {
    return x * x * x;
}

void performDifferentiation() {
    double x, h;
    cout << "Enter the value of x: ";
    cin >> x;
    cout << "Enter the value of h: ";
    cin >> h;
    cout << "Performing differentiation..." << endl;
    double result = performDifferentiation(cubeFunction, x, h);
    cout << "Result: " << result << endl;
}

vector<vector<double>> performMatrixAddition(const vector<vector<double>>& matrix1, const vector<vector<double>>& matrix2) {
    int rows = matrix1.size();
    int cols = matrix1[0].size();
    vector<vector<double>> result(rows, vector<double>(cols));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
    return result;
}

void performMatrixAddition() {
    int rows, cols;
    cout << "Enter the number of rows: ";
    cin >> rows;
    cout << "Enter the number of columns: ";
    cin >> cols;
    cout << "Enter the elements of the first matrix:" << endl;
    vector<vector<double>> matrix1(rows, vector<double>(cols));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix1[i][j];
        }
    }
    cout << "Enter the elements of the second matrix:" << endl;
    vector<vector<double>> matrix2(rows, vector<double>(cols));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix2[i][j];
        }
    }
    vector<vector<double>> result = performMatrixAddition(matrix1, matrix2);
    cout << "Performing matrix addition..." << endl;
    cout << "Resultant Matrix:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }
}

vector<vector<double>> performMatrixSubtraction(const vector<vector<double>>& matrix1, const vector<vector<double>>& matrix2) {
    int rows = matrix1.size();
    int cols = matrix1[0].size();
    vector<vector<double>> result(rows, vector<double>(cols));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            result[i][j] = matrix1[i][j] - matrix2[i][j];
        }
    }
    return result;
}

void performMatrixSubtraction() {
    int rows, cols;
    cout << "Enter the number of rows: ";
    cin >> rows;
    cout << "Enter the number of columns: ";
    cin >> cols;
    cout << "Enter the elements of the first matrix:" << endl;
    vector<vector<double>> matrix1(rows, vector<double>(cols));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix1[i][j];
        }
    }
    cout << "Enter the elements of the second matrix:" << endl;
    vector<vector<double>> matrix2(rows, vector<double>(cols));
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix2[i][j];
        }
    }
    vector<vector<double>> result = performMatrixSubtraction(matrix1, matrix2);
    cout << "Performing matrix subtraction..." << endl;
    cout << "Resultant Matrix:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }
}

vector<vector<double>> performMatrixMultiplication(const vector<vector<double>>& matrix1, const vector<vector<double>>& matrix2) {
    int rows1 = matrix1.size();
    int cols1 = matrix1[0].size();
    int rows2 = matrix2.size();
    int cols2 = matrix2[0].size();
    vector<vector<double>> result(rows1, vector<double>(cols2, 0));
    if (cols1 == rows2) {
        for (int i = 0; i < rows1; i++) {
            for (int j = 0; j < cols2; j++) {
                for (int k = 0; k < cols1; k++) {
                    result[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }
    }
    return result;
}

void performMatrixMultiplication() {
    int rows1, cols1, rows2, cols2;
    cout << "Enter the number of rows in the first matrix: ";
    cin >> rows1;
    cout << "Enter the number of columns in the first matrix: ";
    cin >> cols1;
    cout << "Enter the number of rows in the second matrix: ";
    cin >> rows2;
    cout << "Enter the number of columns in the second matrix: ";
    cin >> cols2;
    if (cols1 != rows2) {
        cout << "Error: Invalid dimensions for matrix multiplication!" << endl;
        return;
    }
    cout << "Enter the elements of the first matrix:" << endl;
    vector<vector<double>> matrix1(rows1, vector<double>(cols1));
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols1; j++) {
            cin >> matrix1[i][j];
        }
    }
    cout << "Enter the elements of the second matrix:" << endl;
    vector<vector<double>> matrix2(rows2, vector<double>(cols2));
    for (int i = 0; i < rows2; i++) {
        for (int j = 0; j < cols2; j++) {
            cin >> matrix2[i][j];
        }
    }
    vector<vector<double>> result = performMatrixMultiplication(matrix1, matrix2);
    cout << "Performing matrix multiplication..." << endl;
    cout << "Resultant Matrix:" << endl;
    for (int i = 0; i < rows1; i++) {
        for (int j = 0; j < cols2; j++) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }
}

void computeMatrixTranspose(int matrix[][3], int rows, int columns, int result[][3]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            result[j][i] = matrix[i][j];
        }
    }
}

void performMatrixTranspose() {
    int matrix[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int rows = 3;
    int columns = 3;
    int result[3][3];

    computeMatrixTranspose(matrix, rows, columns, result);
     cout << "Performing matrix transpose..." << endl;
    cout << "Transposed Matrix:" << endl;
    for (int i = 0; i < columns; i++) {
        for (int j = 0; j < rows; j++) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }
}
int computeDeterminant(int matrix[][3], int size) {
    int determinant = 0;

    if (size == 2) {
        determinant = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
    } else {
        for (int i = 0; i < size; i++) {
            int submatrix[3][3];
            int subrow = 0;

            for (int j = 1; j < size; j++) {
                int subcol = 0;
                for (int k = 0; k < size; k++) {
                    if (k != i) {
                        submatrix[subrow][subcol] = matrix[j][k];
                        subcol++;
                    }
                }
                subrow++;
            }

            determinant += (i % 2 == 0 ? 1 : -1) * matrix[0][i] * computeDeterminant(submatrix, size - 1);
        }
    }

    return determinant;
}

void performDeterminant() {
    int matrix[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int size = 3;

    int result = computeDeterminant(matrix, size);
   cout << "Calculating determinant of a matrix..." << endl;
    cout << "Determinant of the matrix: " << result << endl;
}

// Perform binary search on a sorted array
void performBinarySearch() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the sorted array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int target;
    cout << "Enter the number to search: ";
    cin >> target;

    int left = 0;
    int right = n - 1;
    int index = -1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] == target) {
            index = mid;
            break;
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    cout << "Performing binary search..." << endl;
    if (index != -1) {
        cout << "Element found at index: " << index << endl;
    } else {
        cout << "Element not found" << endl;
    }
}

// Sort an array using bubble sort algorithm
void performBubbleSort() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    cout << "Performing bubble sort..." << endl;
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Sort an array using selection sort algorithm
void performSelectionSort() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }

        // Swap elements
        int temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }

    cout << "Performing selection sort..." << endl;
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Sort an array using insertion sort algorithm
void performInsertionSort() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }

        arr[j + 1] = key;
    }

    cout << "Performing insertion sort..." << endl;
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Merge two sorted arrays
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];
    for (int i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    int i = 0;
    int j = 0;
    int k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Sort an array using merge sort algorithm
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

void performMergeSort() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    mergeSort(arr, 0, n - 1);
    cout << "Performing merge sort..." << endl;
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Partition the array and return the partition index
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            // Swap elements
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    // Swap elements
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;

    return i + 1;
}

// Sort an array using quick sort algorithm
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void performQuickSort() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    quickSort(arr, 0, n - 1);
    cout << "Performing quick sort..." << endl;
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

double performNewtonRaphsonMethod(double (*function)(double), double (*derivative)(double), double x0, double tolerance, int maxIterations) {
    double x = x0;
    for (int i = 0; i < maxIterations; i++) {
        double fx = function(x);
        double fPrimeX = derivative(x);
        double deltaX = -fx / fPrimeX;
        x += deltaX;
        if (abs(deltaX) < tolerance || abs(fx) < tolerance) {
            return x;
        }
    }
    return x;
}

double cubicFunction(double x) {
    return x * x * x - 2 * x - 5;
}

double cubicFunctionDerivative(double x) {
    return 3 * x * x - 2;
}

void performNewtonRaphsonMethod() {
    double x0, tolerance;
    int maxIterations;
    cout << "Enter the initial guess: ";
    cin >> x0;
    cout << "Enter the tolerance: ";
    cin >> tolerance;
    cout << "Enter the maximum number of iterations: ";
    cin >> maxIterations;
    cout << "Performing Newton-Raphson method..." << endl;
    double root = performNewtonRaphsonMethod(cubicFunction, cubicFunctionDerivative, x0, tolerance, maxIterations);
    cout << "Approximate Root: " << root << endl;
}

double performBisectionMethod(double (*function)(double), double a, double b, double tolerance, int maxIterations) {
    double fa = function(a);
    double fb = function(b);
    if (fa * fb > 0) {
        cout << "Error: Function values at the endpoints have the same sign!" << endl;
        return numeric_limits<double>::quiet_NaN();
    }
    double c = a;
    for (int i = 0; i < maxIterations; i++) {
        c = (a + b) / 2;
        double fc = function(c);
        if (abs(fc) < tolerance || abs(b - a) / 2 < tolerance) {
            return c;
        }
        if (fa * fc < 0) {
            b = c;
            fb = fc;
        } else {
            a = c;
            fa = fc;
        }
    }
    return c;
}

double quadraticFunction(double x) {
    return x * x - 4;
}

void performBisectionMethod() {
    double a, b, tolerance;
    int maxIterations;
    cout << "Enter the initial interval [a, b]: ";
    cin >> a >> b;
    cout << "Enter the tolerance: ";
    cin >> tolerance;
    cout << "Enter the maximum number of iterations: ";
    cin >> maxIterations;
    cout << "Performing bisection method..." << endl;
    double root = performBisectionMethod(quadraticFunction, a, b, tolerance, maxIterations);
    cout << "Approximate Root: " << root << endl;
}

// Evaluate the definite integral using Simpson's Rule
double EvaluateFunction(double x) {
    // Replace with your function
    return x * x;
}

double simpsonsRule(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = EvaluateFunction(a) + EvaluateFunction(b);

    for (int i = 1; i < n; i += 2) {
        double x = a + i * h;
        sum += 4 * EvaluateFunction(x);
    }

    for (int i = 2; i < n - 1; i += 2) {
        double x = a + i * h;
        sum += 2 * EvaluateFunction(x);
    }

    return (h / 3) * sum;
}

void performSimpsonsRule() {
    double a = 0.0;  // Lower limit of integration
    double b = 1.0;  // Upper limit of integration
    int n = 100;     // Number of intervals

    double result = simpsonsRule(a, b, n);
    cout << "Performing Simpson's rule..." << endl;
    cout << "Approximate integral value: " << result << endl;
}

// Evaluate the definite integral using Trapezoidal Rule
double evaluateFunction(double x) {
    // Replace with your function
    return x * x;
}

double trapezoidalRule(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = (evaluateFunction(a) + evaluateFunction(b)) / 2.0;

    for (int i = 1; i < n; i++) {
        double x = a + i * h;
        sum += evaluateFunction(x);
    }

    return h * sum;
}

void performTrapezoidalRule() {
    double a = 0.0;  // Lower limit of integration
    double b = 1.0;  // Upper limit of integration
    int n = 100;     // Number of intervals

    double result = trapezoidalRule(a, b, n);
    cout << "Performing trapezoidal rule..." << endl;
    cout << "Approximate integral value: " << result << endl;
}


// Add two vectors
void performVectorAddition() {
    double vector1[3];
    double vector2[3];
    double result[3];

    cout << "Enter the elements of the first vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector1[i];
    }

    cout << "Enter the elements of the second vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector2[i];
    }

    for (int i = 0; i < 3; i++) {
        result[i] = vector1[i] + vector2[i];
    }

    cout << "Performing vector addition..." << endl;
    cout << "Resultant vector: ";
    for (int i = 0; i < 3; i++) {
        cout << result[i] << " ";
    }
    cout << endl;
}

// Subtract two vectors
void performVectorSubtraction() {
    double vector1[3];
    double vector2[3];
    double result[3];

    cout << "Enter the elements of the first vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector1[i];
    }

    cout << "Enter the elements of the second vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector2[i];
    }

    for (int i = 0; i < 3; i++) {
        result[i] = vector1[i] - vector2[i];
    }

    cout << "Performing vector subtraction..." << endl;
    cout << "Resultant vector: ";
    for (int i = 0; i < 3; i++) {
        cout << result[i] << " ";
    }
    cout << endl;
}

// Multiply a vector by a scalar
void performScalarMultiplication() {
    double scalar;
    double vector[3];
    double result[3];

    cout << "Enter the scalar value: ";
    cin >> scalar;

    cout << "Enter the elements of the vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector[i];
    }

    for (int i = 0; i < 3; i++) {
        result[i] = scalar * vector[i];
    }

    cout << "Performing scalar multiplication of a vector..." << endl;
    cout << "Resultant vector: ";
    for (int i = 0; i < 3; i++) {
        cout << result[i] << " ";
    }
    cout << endl;
}

// Compute the dot product of two vectors
double computeDotProduct(double vector1[], double vector2[], int size) {
    double dotProduct = 0.0;

    for (int i = 0; i < size; i++) {
        dotProduct += vector1[i] * vector2[i];
    }

    return dotProduct;
}

void performDotProduct() {
    double vector1[3];
    double vector2[3];
    int size = 3;

    cout << "Enter the elements of the first vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector1[i];
    }

    cout << "Enter the elements of the second vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector2[i];
    }

    double result = computeDotProduct(vector1, vector2, size);
    cout << "Performing dot product of vectors..." << endl;
    cout << "Dot product: " << result << endl;
}

// Compute the cross product of two vectors
void computeCrossProduct(double vector1[], double vector2[], double result[]) {
    result[0] = vector1[1] * vector2[2] - vector1[2] * vector2[1];
    result[1] = vector1[2] * vector2[0] - vector1[0] * vector2[2];
    result[2] = vector1[0] * vector2[1] - vector1[1] * vector2[0];
}

void performCrossProduct() {
    double vector1[3];
    double vector2[3];
    double result[3];

    cout << "Enter the elements of the first vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector1[i];
    }

    cout << "Enter the elements of the second vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector2[i];
    }

    computeCrossProduct(vector1, vector2, result);
    cout << "Performing cross product of vectors..." << endl;
    cout << "Resultant vector: ";
    for (int i = 0; i < 3; i++) {
        cout << result[i] << " ";
    }
    cout << endl;
}


// Compute the magnitude of a vector
double computeMagnitude(double vector[], int size) {
    double magnitude = 0.0;

    for (int i = 0; i < size; i++) {
        magnitude += vector[i] * vector[i];
    }

    return sqrt(magnitude);
}

void performMagnitude() {
    double vector[3];
    int size = 3;

    cout << "Enter the elements of the vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector[i];
    }

    double result = computeMagnitude(vector, size);
    cout << "Calculating magnitude of a vector..." << endl;
    cout << "Magnitude: " << result << endl;
}


// Compute the unit vector of a given vector
void computeUnitVector(double vector[], int size, double unitVector[]) {
    double magnitude = computeMagnitude(vector, size);

    for (int i = 0; i < size; i++) {
        unitVector[i] = vector[i] / magnitude;
    }
}

void performUnitVector() {
    double vector[3];
    int size = 3;
    double unitVector[3];

    cout << "Enter the elements of the vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector[i];
    }

    computeUnitVector(vector, size, unitVector);
    cout << "Calculating unit vector..." << endl;
    cout << "Unit vector: ";
    for (int i = 0; i < 3; i++) {
        cout << unitVector[i] << " ";
    }
    cout << endl;
}

// Compute the angle between two vectors
double computeAngleBetweenVectors(double vector1[], double vector2[], int size) {
    double dotProduct = computeDotProduct(vector1, vector2, size);
    double magnitude1 = computeMagnitude(vector1, size);
    double magnitude2 = computeMagnitude(vector2, size);

    double cosineTheta = dotProduct / (magnitude1 * magnitude2);

    return acos(cosineTheta) * 180.0 / M_PI;
}

void performAngleBetweenVectors() {
    double vector1[3];
    double vector2[3];
    int size = 3;

    cout << "Enter the elements of the first vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector1[i];
    }

    cout << "Enter the elements of the second vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector2[i];
    }

    double result = computeAngleBetweenVectors(vector1, vector2, size);
    cout << "Calculating angle between vectors..." << endl;
    cout << "Angle between vectors: " << result << " degrees" << endl;
}

// Compute the scalar projection of vector1 onto vector2
double computeScalarProjection(double vector1[], double vector2[], int size) {
    double dotProduct = computeDotProduct(vector1, vector2, size);
    double magnitude2 = computeMagnitude(vector2, size);

    return dotProduct / magnitude2;
}

void performScalarProjection() {
    double vector1[3];
    double vector2[3];
    int size = 3;

    cout << "Enter the elements of the first vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector1[i];
    }

    cout << "Enter the elements of the second vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector2[i];
    }

    double result = computeScalarProjection(vector1, vector2, size);
    cout << "Performing scalar projection..." << endl;
    cout << "Scalar projection: " << result << endl;
}

// Compute the vector projection of vector1 onto vector2
void performVectorProjection() {
    double vector1[3];
    double vector2[3];
    int size = 3;
    double result[3];

    cout << "Enter the elements of the first vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector1[i];
    }

    cout << "Enter the elements of the second vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector2[i];
    }

    double scalarProjection = 0.0;

    for (int i = 0; i < size; i++) {
        scalarProjection += vector1[i] * vector2[i];
    }

    double magnitude = 0.0;
    for (int i = 0; i < size; i++) {
        magnitude += vector2[i] * vector2[i];
    }
    magnitude = sqrt(magnitude);

    for (int i = 0; i < size; i++) {
        result[i] = scalarProjection / (magnitude * magnitude) * vector2[i];
    }

    // Print the result
    cout << "Resultant vector projection: ";
    for (int i = 0; i < size; i++) {
        cout << result[i] << " ";
    }
    cout << endl;
}

// Compute the triple product of three vectors
double computeTripleProduct(double vector1[], double vector2[], double vector3[], int size) {
    double crossProduct[3];
    computeCrossProduct(vector2, vector3, crossProduct);

    return computeDotProduct(vector1, crossProduct, size);
}

void performTripleProduct() {
    double vector1[3];
    double vector2[3];
    double vector3[3];
    int size = 3;

    cout << "Enter the elements of the first vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector1[i];
    }

    cout << "Enter the elements of the second vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector2[i];
    }

    cout << "Enter the elements of the third vector (3 values): ";
    for (int i = 0; i < 3; i++) {
        cin >> vector3[i];
    }

    double result = computeTripleProduct(vector1, vector2, vector3, size);
    cout << "Calculating triple product..." << endl;
    cout << "Triple product: " << result << endl;
}


void performGaussJordan(vector<vector<double>>& matrix, int n) {
    for (int i = 0; i < n; i++) {
        int pivotRow = i;
        for (int j = i + 1; j < n; j++) {
            if (abs(matrix[j][i]) > abs(matrix[pivotRow][i])) {
                pivotRow = j;
            }
        }
        if (pivotRow != i) {
            for (int k = 0; k <= n; k++) {
                swap(matrix[i][k], matrix[pivotRow][k]);
            }
        }
        for (int j = 0; j < n; j++) {
            if (j != i) {
                double ratio = matrix[j][i] / matrix[i][i];
                for (int k = 0; k <= n; k++) {
                    matrix[j][k] -= ratio * matrix[i][k];
                }
            }
        }
    }
    for (int i = 0; i < n; i++) {
        double divisor = matrix[i][i];
        for (int j = 0; j <= n; j++) {
            matrix[i][j] /= divisor;
        }
    }
}

void performLinearEquationSolver() {
    int n;
    cout << "Enter the number of variables: ";
    cin >> n;
    vector<vector<double>> matrix(n, vector<double>(n + 1));
    cout << "Enter the augmented matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= n; j++) {
            cin >> matrix[i][j];
        }
    }
    performGaussJordan(matrix, n);
    cout << "Performing Gauss Jordan..." << endl;
    cout << "Solution:" << endl;
    for (int i = 0; i < n; i++) {
        cout << "x" << i + 1 << " = " << matrix[i][n] << endl;
    }
}


// Function to calculate the permutation of n objects taken r at a time

// Function to calculate factorial
int factorial(int n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

// Function to calculate permutation
int permutation(int n, int r) {
    if (n < r) {
        return 0;
    }
    return factorial(n) / factorial(n - r);
}

// Function to perform permutation
void performPermutation() {
    int n, r;
    cout << "Enter the value of n: ";
    cin >> n;
    cout << "Enter the value of r: ";
    cin >> r;

    int result = permutation(n, r);
    cout << "Calculating permutation..." << endl;
    cout << "Permutation of " << n << " objects taken " << r << " at a time is: " << result << endl;
}

// Function to calculate the combination of n objects taken r at a time
int combination(int n, int r) {
    if (n < r) {
        return 0;
    }
    return factorial(n) / (factorial(r) * factorial(n - r));
}
void performCombination() {
    int n, r;
    cout << "Enter the value of n: ";
    cin >> n;
    cout << "Enter the value of r: ";
    cin >> r;

    int result = combination(n, r);
    
    cout << "Calculating combination..." << endl;
    cout << "Combination of " << n << " objects taken " << r << " at a time is: " << result << endl;
}


// Function to calculate the probability of an event
void performProbability() {
    int favorableOutcomes, totalOutcomes;
    cout << "Enter the number of favorable outcomes: ";
    cin >> favorableOutcomes;
    cout << "Enter the total number of outcomes: ";
    cin >> totalOutcomes;

    double result = static_cast<double>(favorableOutcomes) / totalOutcomes;
    cout << "Calculating probability..." << endl;
    cout << "Probability: " << result << endl;
}

// Function to calculate the mean of a set of numbers
void performMean() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<double> numbers(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> numbers[i];
    }

    double sum = accumulate(numbers.begin(), numbers.end(), 0.0);
    double meanValue = sum / numbers.size();
    cout << "Calculating mean..." << endl;
    cout << "Mean: " << meanValue << endl;
}

// Function to calculate the mean of a set of numbers
double calculateMean(const vector<double>& numbers) {
    double sum = 0.0;
    for (const auto& num : numbers) {
        sum += num;
    }
    return sum / numbers.size();
}

// Function to calculate the variance of a set of numbers
double calculateVariance(const vector<double>& numbers) {
    double meanValue = calculateMean(numbers);
    double sum = 0.0;
    for (const auto& num : numbers) {
        sum += pow(num - meanValue, 2);
    }
    return sum / numbers.size();
}

// Function to calculate the standard deviation of a set of numbers
double calculateStandardDeviation(const vector<double>& numbers) {
    double varianceValue = calculateVariance(numbers);
    return sqrt(varianceValue);
}

void performVariance() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<double> numbers(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> numbers[i];
    }

    double varianceValue = calculateVariance(numbers);
    cout << "Calculating variance..." << endl;
    cout << "Variance: " << varianceValue << endl;
}

void performStandardDeviation() {
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<double> numbers(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> numbers[i];
    }

    double standardDeviationValue = calculateStandardDeviation(numbers);
    cout << "Calculating standard deviation..." << endl;
    cout << "Standard Deviation: " << standardDeviationValue << endl;
}

// Function to calculate the sum of a series using Taylor series expansion
void performTaylorSeries() {
    double x;
    int n;
    cout << "Enter the value of x: ";
    cin >> x;
    cout << "Enter the number of terms: ";
    cin >> n;

    double sum = 0.0;
    for (int i = 0; i < n; i++) {
        sum += pow(x, i) / factorial(i);
    }
    cout << "Calculating Taylor series..." << endl;
    cout << "Sum of Taylor series: " << sum << endl;
}

// Function to calculate the sum of a Fourier series
void performFourierSeries() {
    double x;
    int n;
    cout << "Enter the value of x: ";
    cin >> x;
    cout << "Enter the number of coefficients: ";
    cin >> n;

    vector<double> coefficients(n);
    cout << "Enter the coefficients: ";
    for (int i = 0; i < n; i++) {
        cin >> coefficients[i];
    }

    double sum = 0.0;
    for (int i = 0; i < n; i++) {
        sum += coefficients[i] * cos(i * x);
    }
    cout << "Calculating Fourier series..." << endl;
    cout << "Sum of Fourier series: " << sum << endl;
}

// Function to calculate the area using Green's theorem
void performGreensTheorem() {
    int n;
    cout << "Enter the number of vertices: ";
    cin >> n;

    vector<double> x(n);
    vector<double> y(n);
    cout << "Enter the x-coordinates: ";
    for (int i = 0; i < n; i++) {
        cin >> x[i];
    }
    cout << "Enter the y-coordinates: ";
    for (int i = 0; i < n; i++) {
        cin >> y[i];
    }

    double sum = 0.0;
    for (int i = 0; i < n - 1; i++) {
        sum += x[i] * y[i + 1] - x[i + 1] * y[i];
    }
    sum += x[n - 1] * y[0] - x[0] * y[n - 1];
    double area = 0.5 * std::abs(sum);
    cout << "Applying Green's theorem..." << endl;
    cout << "Area using Green's theorem: " << area << endl;
}

// Function to calculate the line integral using Stokes' theorem
void performStokesTheorem() {
    int n;
    cout << "Enter the number of vertices: ";
    cin >> n;

    vector<double> x(n);
    vector<double> y(n);
    vector<double> z(n);
    cout << "Enter the x-coordinates: ";
    for (int i = 0; i < n; i++) {
        cin >> x[i];
    }
    cout << "Enter the y-coordinates: ";
    for (int i = 0; i < n; i++) {
        cin >> y[i];
    }
    cout << "Enter the z-coordinates: ";
    for (int i = 0; i < n; i++) {
        cin >> z[i];
    }

    double sum = 0.0;
    for (int i = 0; i < n - 1; i++) {
        sum += x[i] * (y[i + 1] - y[i]) + y[i] * (x[i] - x[i + 1]);
    }
    sum += x[n - 1] * (y[0] - y[n - 1]) + y[n - 1] * (x[n - 1] - x[0]);
    double lineIntegral = sum;
    cout << "Applying Stokes' theorem..." << endl;
    cout << "Line integral using Stokes' theorem: " << lineIntegral << endl;
}

// Function to calculate the function value at a given point
double valuateFunction(double x) {
    // Replace this with your actual function implementation
    return x * x;
}

// Function to calculate the residue of a function at a given point
void performResidue() {
    // Function pointer to the function
    double (*function)(double);
    function = valuateFunction;

    double x;
    cout << "Enter the value of x: ";
    cin >> x;

    double h = 1e-8;
    double fx = function(x);
    double fPlusHx = function(x + h);
    double fMinusHx = function(x - h);
    double residue = (fPlusHx - 2.0 * fx + fMinusHx) / (h * h);
    cout << "Calculating residue..." << endl;
    cout << "Residue: " << residue << endl;
}

// Function to calculate the Bessel function of the first kind
void performBessel() {
    int n;
    double x;
    cout << "Enter the value of n: ";
    cin >> n;
    cout << "Enter the value of x: ";
    cin >> x;

    double sum = 0.0;
    for (int k = 0; k <= n; k++) {
        double coefficient = std::pow(-1, k) * std::pow(x / 2, 2 * k + n) / (factorial(k) * factorial(n + k));
        sum += coefficient;
    }
    cout << "Calculating Bessel function..." << endl;
    cout << "Bessel function of the first kind: " << sum << endl;
}


// Function to calculate the function value at a given point
double aluateFunction(double t) {
    // Replace this with your actual function implementation
    return t * t;
}

// Function to calculate the Laplace transform of a function
void performLaplaceTransform() {
    // Function pointer to the function
    double (*function)(double);
    function = aluateFunction;

    double s;
    cout << "Enter the value of s: ";
    cin >> s;

    double sum = 0.0;
    double t = 0.0;
    while (t < 10.0) {
        sum += function(t) * exp(-s * t);
        t += 0.01;
    }

    cout << "Performing Laplace transform..." << endl;
    cout << "Laplace transform: " << sum << endl;
}
// Function to calculate the probability using Bayes' theorem
void performBayesTheorem() {
    double priorProbability, likelihood, evidence;
    cout << "Enter the prior probability: ";
    cin >> priorProbability;
    cout << "Enter the likelihood: ";
    cin >> likelihood;
    cout << "Enter the evidence: ";
    cin >> evidence;

    double probability = (priorProbability * likelihood) / evidence;
    cout << "Applying Bayes' theorem..." << endl;
    cout << "Probability using Bayes' theorem: " << probability << endl;
}

double alculateDerivative(double x, double y) {
    // Replace this with your actual derivative calculation logic
    return x + y;
}

// Function to solve an initial value problem using the fourth-order Runge-Kutta method
void performRungeKuttaMethod() {
    // Function pointer to the derivative function
    double (*function)(double, double);
    function = alculateDerivative;

    double x0, y0, h;
    int n;
    cout << "Enter the initial value of x: ";
    cin >> x0;
    cout << "Enter the initial value of y: ";
    cin >> y0;
    cout << "Enter the step size (h): ";
    cin >> h;
    cout << "Enter the number of steps (n): ";
    cin >> n;

    double x = x0;
    double y = y0;
    for (int i = 0; i < n; i++) {
        double k1 = h * function(x, y);
        double k2 = h * function(x + h / 2, y + k1 / 2);
        double k3 = h * function(x + h / 2, y + k2 / 2);
        double k4 = h * function(x + h, y + k3);
        y += (k1 + 2 * k2 + 2 * k3 + k4) / 6;
        x += h;
    }
    cout << "Applying Runge-Kutta method..." << endl;
    cout << "Solution of the initial value problem: " << y << endl;
}


int main() {
    int choice;

    do {
        displayMenu();

        cout << "Enter your choice (1-77): ";
        cin >> choice;

        switch (choice) {
            case 1:
                performAddition();
                break;
            case 2:
                performSubtraction();
                break;
            case 3:
                performMultiplication();
                break;
            case 4:
                performDivision();
                break;
            case 5:
                performExponentiation();
                break;
            case 6:
                performSquareRoot();
                break;
            case 7:
                performLogarithm();
                break;
            case 8:
                performTrigonometricFunctions();
                break;
            case 9:
                performFactorial();
                break;
            case 10:
                performFactorial();
                break;
            case 11:
                performAbsoluteValue();
                break;
            case 12:
                performModulo();
                break;
            case 13:
                performFloor();
                break;
            case 14:
                performCeiling();
                break;
            case 15:
                performRound();
                break;
            case 16:
                performPrimeCheck();
                break;
            case 17:
                performFibonacciSeries();
                break;
            case 18:
                performPercentage();
                break;
            case 19:
                performPowerOf2();
                break;
            case 20:
                performSquare();
                break;
            case 21:
                performCube();
                break;
            case 22:
                performAverage();
                break;
            case 23:
                performNaturalLogarithm();
                break;
            case 24:
                performInverse();
                break;
            case 25:
                performMinimum();
                break;
            case 26:
                performMaximum();
                break;
            case 27:
                performReverseDigits();
                break;
            case 28:
                performFactorialIterative();
                break;
            case 29:
                performPower();
                break;
            case 30:
                performCubeRoot();
                break;
            case 31:
                performIntegration();
                break;
            case 32:
                performDifferentiation();
                break;
            case 33:
                performMatrixAddition();
                break;
            case 34:
                performMatrixSubtraction();
                break;
            case 35:
                performMatrixMultiplication();
                break;
            case 36:
                performMatrixTranspose();
                break;
            case 37:
                performDeterminant();
                break;
            case 38:
                performBinarySearch();
                break;
            case 39:
                performBubbleSort();
                break;
            case 40:
                performSelectionSort();
                break;
            case 41:
                performInsertionSort();
                break;
            case 42:
                performMergeSort();
                break;
            case 43:
                performQuickSort();
                break;
            case 44:
                performNewtonRaphsonMethod();
                break;
            case 45:
                performBisectionMethod();
                break;
            case 46:
                performSimpsonsRule();
                break;
            case 47:
                performTrapezoidalRule();
                break;
            case 48:
                performVectorAddition();
                break;
            case 49:
                performVectorSubtraction();
                break;
            case 50:
                performScalarMultiplication();
                break;
            case 51:
                performDotProduct();
                break;
            case 52:
                performCrossProduct();
                break;
            case 53:
                performMagnitude();
                break;
            case 54:
                performUnitVector();
                break;
            case 55:
                performAngleBetweenVectors();
                break;
            case 56:
                performScalarProjection();
                break;
            case 57:
                performVectorProjection();
                break;
            case 58:
                performTripleProduct();
                break;
            case 59:
                performLinearEquationSolver();
                break;
            case 60:
                performLinearEquationSolver();
                break;
            case 61:
                performPermutation();
                break;
            case 62:
                performCombination();
                break;
            case 63:
                performProbability();
                break;
            case 64:
                performMean();
                break;
            case 65:
                performVariance();
                break;
            case 66:
                performStandardDeviation();
                break;
            case 67:
                performTaylorSeries();
                break;
            case 68:
                performFourierSeries();
                break;
            case 69:
                performGreensTheorem();
                break;
            case 70:
                performStokesTheorem();
                break;
            case 71:
                performResidue();
                break;
            case 72:
                performBessel();
                break;
            case 73:
                performLaplaceTransform();
                break;
            case 74:
                performBayesTheorem();
                break;
            case 75:
                performRungeKuttaMethod();
                break;
            case 76:
                cout << "Exiting program..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 76);

    return 0;
}

/*
This code is auto explanatory
*/
